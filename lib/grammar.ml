type token =
  | ID of string
  | STRING of string
  | INT of int
  | COMMA
  | COLON
  | SEMICOLON
  | LPAREN
  | RPAREN
  | LBRACK
  | RBRACK
  | LBRACE
  | RBRACE
  | DOT
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | EQ
  | NEQ
  | LT
  | LE
  | GT
  | GE
  | AND
  | OR
  | ASSIGN
  | ARRAY
  | IF
  | THEN
  | ELSE
  | WHILE
  | FOR
  | TO
  | DO
  | LET
  | IN
  | END
  | OF
  | BREAK
  | NIL
  | FUNCTION
  | VAR
  | TYPE

open Parsing

let _ = parse_error

open Absyn
open Symbol
open Errormsg
module A = Absyn

let get_pos_cnum () = (Parsing.symbol_start_pos ()).pos_cnum
let get_pos_cnum_of_n n = (Parsing.rhs_start_pos n).pos_cnum

exception InternalError

let yytransl_const =
  [|
    260 (* COMMA *);
    261 (* COLON *);
    262 (* SEMICOLON *);
    263 (* LPAREN *);
    264 (* RPAREN *);
    265 (* LBRACK *);
    266 (* RBRACK *);
    267 (* LBRACE *);
    268 (* RBRACE *);
    269 (* DOT *);
    270 (* PLUS *);
    271 (* MINUS *);
    272 (* TIMES *);
    273 (* DIVIDE *);
    274 (* EQ *);
    275 (* NEQ *);
    276 (* LT *);
    277 (* LE *);
    278 (* GT *);
    279 (* GE *);
    280 (* AND *);
    281 (* OR *);
    282 (* ASSIGN *);
    283 (* ARRAY *);
    284 (* IF *);
    285 (* THEN *);
    286 (* ELSE *);
    287 (* WHILE *);
    288 (* FOR *);
    289 (* TO *);
    290 (* DO *);
    291 (* LET *);
    292 (* IN *);
    293 (* END *);
    294 (* OF *);
    295 (* BREAK *);
    296 (* NIL *);
    297 (* FUNCTION *);
    298 (* VAR *);
    299 (* TYPE *);
    0;
  |]

let yytransl_block = [| 257 (* ID *); 258 (* STRING *); 259 (* INT *); 0 |]

let yylhs =


let yylen =


let yydefred =
  "\000\000\000\000\000\000\000\000\072\000\001\000\000\000\000\000\000\000\000\000\002\000\004\000\005\000\006\000\000\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\000\000\000\000\000\000\031\000\032\000\000\000\000\000\000\000\000\000\000\000\047\000\033\000\058\000\000\000\000\000\000\000\048\000\049\000\000\000\053\000\054\000\055\000\000\000\000\000\000\000\013\000\000\000\000\000\008\000\000\000\000\000\007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\046\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\025\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\018\000\059\000\057\000\056\000\000\000\000\000\000\000\000\000\000\000\036\000\037\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015\000\000\000\000\000\014\000\000\000\009\000\010\000\067\000\000\000\000\000\000\000\052\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\019\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"

let yydgoto =
  "\002\000\004\000\034\000\009\000\010\000\011\000\012\000\013\000\053\000\045\000\046\000\047\000\092\000\093\000\094\000\035\000\036\000\037\000\038\000\039\000\040\000\041\000\042\000\043\000\088\000\089\000"

let yysindex =


let yyrindex =


let yygindex =
  "\000\000\000\000\210\000\000\000\203\000\000\000\000\000\000\000\000\000\164\000\000\000\134\000\000\000\000\000\092\000\235\255\195\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"

let yytablesize = 948

let yytable =


let yycheck =


let yynames_const =
  "COMMA\000COLON\000SEMICOLON\000LPAREN\000RPAREN\000LBRACK\000RBRACK\000LBRACE\000RBRACE\000DOT\000PLUS\000MINUS\000TIMES\000DIVIDE\000EQ\000NEQ\000LT\000LE\000GT\000GE\000AND\000OR\000ASSIGN\000ARRAY\000IF\000THEN\000ELSE\000WHILE\000FOR\000TO\000DO\000LET\000IN\000END\000OF\000BREAK\000NIL\000FUNCTION\000VAR\000TYPE\000"

let yynames_block = "ID\000STRING\000INT\000"

let yyact =
  [|
    (fun _ -> failwith "parser");
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 0 : 'let_stmt) in
      Obj.repr (_1 : A.exp));
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 0 : 'dec) in
      Obj.repr ([ _1 ] : 'decs));
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decs) in
      let _2 = (Parsing.peek_val __caml_parser_env 0 : 'dec) in
      Obj.repr (_1 @ [ _2 ] : 'decs));
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tydec) in
      Obj.repr (_1 : 'dec));
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 0 : 'vardec) in
      Obj.repr (_1 : 'dec));
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fundec) in
      Obj.repr (_1 : 'dec));
    (fun __caml_parser_env ->
      let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
      let _4 = (Parsing.peek_val __caml_parser_env 0 : 'ty) in
      Obj.repr
        (A.TypeDec
           { name = Symbol.to_symbol _2; ty = _4; pos = get_pos_cnum () }
          : 'tydec));
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
      Obj.repr (A.NameTy (Symbol.to_symbol _1, get_pos_cnum ()) : 'ty));
    (fun __caml_parser_env ->
      let _2 = (Parsing.peek_val __caml_parser_env 1 : 'tyfields) in
      Obj.repr (A.RecordTy _2 : 'ty));
    (fun __caml_parser_env ->
      let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
      Obj.repr (A.ArrayTy (Symbol.to_symbol _3, get_pos_cnum ()) : 'ty));
    (fun __caml_parser_env -> Obj.repr ([] : 'tyfields));
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 0 : 'nonempty_tyfields) in
      Obj.repr (_1 : 'tyfields));
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tyfield) in
      Obj.repr ([ _1 ] : 'nonempty_tyfields));
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 2 : 'nonempty_tyfields) in
      let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tyfield) in
      Obj.repr (_1 @ [ _3 ] : 'nonempty_tyfields));
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
      let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
      Obj.repr
        ({
           name = Symbol.to_symbol _1;
           escape = ref true;
           typ = Symbol.to_symbol _3;
           pos = get_pos_cnum ();
         }
          : 'tyfield));
    (fun __caml_parser_env -> Obj.repr ([] : 'record_initialisation_fields));
    (fun __caml_parser_env ->
      let _1 =
        (Parsing.peek_val __caml_parser_env 0
          : 'ne_record_initialisation_fields)
      in
      Obj.repr (_1 : 'record_initialisation_fields));
    (fun __caml_parser_env ->
      let _1 =
        (Parsing.peek_val __caml_parser_env 0 : 'record_initialisation_field)
      in
      Obj.repr ([ _1 ] : 'ne_record_initialisation_fields));
    (fun __caml_parser_env ->
      let _1 =
        (Parsing.peek_val __caml_parser_env 2
          : 'ne_record_initialisation_fields)
      in
      let _3 =
        (Parsing.peek_val __caml_parser_env 0 : 'record_initialisation_field)
      in
      Obj.repr (_1 @ [ _3 ] : 'ne_record_initialisation_fields));
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
      let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
      Obj.repr
        ((Symbol.to_symbol _1, _3, get_pos_cnum ())
          : 'record_initialisation_field));
    (fun __caml_parser_env ->
      let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
      let _4 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
      Obj.repr
        (VarDec
           {
             name = Symbol.to_symbol _2;
             escape = ref true;
             typ = None;
             init = _4;
             pos = get_pos_cnum ();
           }
          : 'vardec));
    (fun __caml_parser_env ->
      let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
      let _4 = (Parsing.peek_val __caml_parser_env 2 : string) in
      let _6 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
      Obj.repr
        (VarDec
           {
             name = Symbol.to_symbol _2;
             escape = ref true;
             typ = Some (Symbol.to_symbol _4, get_pos_cnum_of_n 4);
             init = _6;
             pos = get_pos_cnum ();
           }
          : 'vardec));
    (fun __caml_parser_env ->
      let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
      let _4 = (Parsing.peek_val __caml_parser_env 3 : 'tyfields) in
      let _7 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
      Obj.repr
        (FunctionDec
           {
             name = Symbol.to_symbol _2;
             params = _4;
             result = None;
             body = _7;
             pos = get_pos_cnum ();
           }
          : 'fundec));
    (fun __caml_parser_env ->
      let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
      let _4 = (Parsing.peek_val __caml_parser_env 5 : 'tyfields) in
      let _7 = (Parsing.peek_val __caml_parser_env 2 : string) in
      let _9 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
      Obj.repr
        (FunctionDec
           {
             name = Symbol.to_symbol _2;
             params = _4;
             result = Some (Symbol.to_symbol _7, get_pos_cnum_of_n 7);
             body = _9;
             pos = get_pos_cnum ();
           }
          : 'fundec));
    (fun __caml_parser_env ->
      let _2 = (Parsing.peek_val __caml_parser_env 3 : 'decs) in
      let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expseq) in
      Obj.repr
        (A.LetExp { decs = _2; body = _4; pos = get_pos_cnum () } : 'let_stmt));
    (fun __caml_parser_env -> Obj.repr (A.SeqExp [] : 'expseq));
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 0 : 'nonempty_expseq) in
      Obj.repr (_1 : 'expseq));
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
      Obj.repr (A.SeqExp [ (_1, get_pos_cnum ()) ] : 'nonempty_expseq));
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 2 : 'nonempty_expseq) in
      let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
      Obj.repr
        (match _1 with
         | A.SeqExp l -> A.SeqExp (l @ [ (_3, get_pos_cnum ()) ])
         | _ -> raise InternalError (* This can never happen *)
          : 'nonempty_expseq));
    (fun __caml_parser_env ->
      let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
      Obj.repr
        (ErrorMsg.error_pos (get_pos_cnum ()) "Syntax error";
         A.SeqExp [ (_3, get_pos_cnum ()) ]
          : 'nonempty_expseq));
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
      Obj.repr (A.StringExp (_1, get_pos_cnum ()) : 'exp));
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
      Obj.repr (A.IntExp _1 : 'exp));
    (fun __caml_parser_env -> Obj.repr (A.NilExp (get_pos_cnum ()) : 'exp));
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
      let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
      Obj.repr
        (A.OpExp
           { left = _1; right = _3; oper = A.PlusOp; pos = get_pos_cnum () }
          : 'exp));
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
      let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
      Obj.repr
        (A.OpExp
           { left = _1; right = _3; oper = A.MinusOp; pos = get_pos_cnum () }
          : 'exp));
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
      let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
      Obj.repr
        (A.OpExp
           { left = _1; right = _3; oper = A.TimesOp; pos = get_pos_cnum () }
          : 'exp));
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
      let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
      Obj.repr
        (A.OpExp
           { left = _1; right = _3; oper = A.DivideOp; pos = get_pos_cnum () }
          : 'exp));
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
      let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
      Obj.repr
        (A.OpExp { left = _1; right = _3; oper = A.EqOp; pos = get_pos_cnum () }
          : 'exp));
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
      let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
      Obj.repr
        (A.OpExp
           { left = _1; right = _3; oper = A.NeqOp; pos = get_pos_cnum () }
          : 'exp));
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
      let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
      Obj.repr
        (A.OpExp { left = _1; right = _3; oper = A.LtOp; pos = get_pos_cnum () }
          : 'exp));
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
      let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
      Obj.repr
        (A.OpExp { left = _1; right = _3; oper = A.GtOp; pos = get_pos_cnum () }
          : 'exp));
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
      let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
      Obj.repr
        (A.OpExp { left = _1; right = _3; oper = A.LeOp; pos = get_pos_cnum () }
          : 'exp));
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
      let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
      Obj.repr
        (A.OpExp { left = _1; right = _3; oper = A.GeOp; pos = get_pos_cnum () }
          : 'exp));
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
      let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
      Obj.repr
        (A.IfExp
           {
             test = _1;
             then' = _3;
             else' = Some (A.IntExp 0);
             pos = get_pos_cnum ();
           }
          : 'exp));
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
      let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
      Obj.repr
        (A.IfExp
           {
             test = _1;
             then' = A.IntExp 1;
             else' = Some _3;
             pos = get_pos_cnum ();
           }
          : 'exp));
    (fun __caml_parser_env ->
      let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
      Obj.repr
        (A.OpExp
           {
             left = A.IntExp 0;
             right = _2;
             oper = A.MinusOp;
             pos = get_pos_cnum ();
           }
          : 'exp));
    (fun __caml_parser_env -> Obj.repr (A.BreakExp (get_pos_cnum ()) : 'exp));
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 0 : 'assignment) in
      Obj.repr (_1 : 'exp));
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 0 : 'funcall) in
      Obj.repr (_1 : 'exp));
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 0 : 'var) in
      Obj.repr (A.VarExp _1 : 'exp));
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
      let _3 = (Parsing.peek_val __caml_parser_env 3 : 'exp) in
      let _6 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
      Obj.repr
        (A.ArrayExp
           {
             typ = Symbol.to_symbol _1;
             size = _3;
             init = _6;
             pos = get_pos_cnum ();
           }
          : 'exp));
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
      let _3 =
        (Parsing.peek_val __caml_parser_env 1 : 'record_initialisation_fields)
      in
      Obj.repr
        (A.RecordExp
           { fields = _3; typ = Symbol.to_symbol _1; pos = get_pos_cnum () }
          : 'exp));
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 0 : 'if_stmt) in
      Obj.repr (_1 : 'exp));
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 0 : 'for_stmt) in
      Obj.repr (_1 : 'exp));
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 0 : 'while_stmt) in
      Obj.repr (_1 : 'exp));
    (fun __caml_parser_env ->
      let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expseq) in
      Obj.repr (_2 : 'exp));
    (fun __caml_parser_env ->
      Obj.repr
        (ErrorMsg.error_pos (get_pos_cnum_of_n 2) "Syntax error";
         A.NilExp (get_pos_cnum_of_n 2)
          : 'exp));
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 0 : 'let_stmt) in
      Obj.repr (_1 : 'exp));
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
      let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
      Obj.repr
        (A.FieldVar
           ( A.SimpleVar (Symbol.to_symbol _1, get_pos_cnum ()),
             Symbol.to_symbol _3,
             get_pos_cnum () )
          : 'var));
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
      let _3 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
      Obj.repr
        (A.SubscriptVar
           ( A.SimpleVar (Symbol.to_symbol _1, get_pos_cnum ()),
             _3,
             get_pos_cnum () )
          : 'var));
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
      Obj.repr (A.SimpleVar (Symbol.to_symbol _1, get_pos_cnum ()) : 'var));
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 2 : 'var) in
      let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
      Obj.repr
        (AssignExp { var = _1; exp = _3; pos = get_pos_cnum () } : 'assignment));
    (fun __caml_parser_env ->
      let _2 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
      let _4 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
      Obj.repr
        (WhileExp { test = _2; body = _4; pos = get_pos_cnum () } : 'while_stmt));
    (fun __caml_parser_env ->
      let _2 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
      let _4 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
      Obj.repr
        (A.IfExp { test = _2; then' = _4; else' = None; pos = get_pos_cnum () }
          : 'if_stmt));
    (fun __caml_parser_env ->
      let _2 = (Parsing.peek_val __caml_parser_env 4 : 'exp) in
      let _4 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
      let _6 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
      Obj.repr
        (A.IfExp
           { test = _2; then' = _4; else' = Some _6; pos = get_pos_cnum () }
          : 'if_stmt));
    (fun __caml_parser_env ->
      let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
      let _4 = (Parsing.peek_val __caml_parser_env 4 : 'exp) in
      let _6 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
      let _8 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
      Obj.repr
        (ForExp
           {
             var = Symbol.to_symbol _2;
             escape = ref true;
             lo = _4;
             hi = _6;
             body = _8;
             pos = get_pos_cnum ();
           }
          : 'for_stmt));
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
      let _3 = (Parsing.peek_val __caml_parser_env 1 : 'params) in
      Obj.repr
        (CallExp
           { func = Symbol.to_symbol _1; args = _3; pos = get_pos_cnum () }
          : 'funcall));
    (fun __caml_parser_env -> Obj.repr ([] : 'params));
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 0 : 'non_empty_params) in
      Obj.repr (_1 : 'params));
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
      Obj.repr ([ _1 ] : 'non_empty_params));
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 2 : 'non_empty_params) in
      let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
      Obj.repr (_1 @ [ _3 ] : 'non_empty_params))
    (* Entry input *);
    (fun __caml_parser_env ->
      raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)));
  |]

let yytables =
  {
    Parsing.actions = yyact;
    Parsing.transl_const = yytransl_const;
    Parsing.transl_block = yytransl_block;
    Parsing.lhs = yylhs;
    Parsing.len = yylen;
    Parsing.defred = yydefred;
    Parsing.dgoto = yydgoto;
    Parsing.sindex = yysindex;
    Parsing.rindex = yyrindex;
    Parsing.gindex = yygindex;
    Parsing.tablesize = yytablesize;
    Parsing.table = yytable;
    Parsing.check = yycheck;
    Parsing.error_function = parse_error;
    Parsing.names_const = yynames_const;
    Parsing.names_block = yynames_block;
  }

let input (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) : A.exp =
  Parsing.yyparse yytables 1 lexfun lexbuf

let sexp_of_token t =
  match t with
  | ID s -> Base.Sexp.List [ Base.Sexp.Atom "ID"; Base.Sexp.Atom s ]
  | STRING s -> Base.Sexp.List [ Base.Sexp.Atom "STRING"; Base.Sexp.Atom s ]
  | INT i ->
      Base.Sexp.List [ Base.Sexp.Atom "INT"; Base.Sexp.Atom (string_of_int i) ]
  | COMMA -> Base.Sexp.List [ Base.Sexp.Atom "COMMA" ]
  | COLON -> Base.Sexp.List [ Base.Sexp.Atom "COLON" ]
  | SEMICOLON -> Base.Sexp.List [ Base.Sexp.Atom "SEMICOLON" ]
  | LPAREN -> Base.Sexp.List [ Base.Sexp.Atom "LPAREN" ]
  | RPAREN -> Base.Sexp.List [ Base.Sexp.Atom "RPAREN" ]
  | LBRACK -> Base.Sexp.List [ Base.Sexp.Atom "LBRACK" ]
  | RBRACK -> Base.Sexp.List [ Base.Sexp.Atom "RBRACK" ]
  | LBRACE -> Base.Sexp.List [ Base.Sexp.Atom "LBRACE" ]
  | RBRACE -> Base.Sexp.List [ Base.Sexp.Atom "RBRACE" ]
  | DOT -> Base.Sexp.List [ Base.Sexp.Atom "DOT" ]
  | PLUS -> Base.Sexp.List [ Base.Sexp.Atom "PLUS" ]
  | MINUS -> Base.Sexp.List [ Base.Sexp.Atom "MINUS" ]
  | TIMES -> Base.Sexp.List [ Base.Sexp.Atom "TIMES" ]
  | DIVIDE -> Base.Sexp.List [ Base.Sexp.Atom "DIVIDE" ]
  | EQ -> Base.Sexp.List [ Base.Sexp.Atom "EQ" ]
  | NEQ -> Base.Sexp.List [ Base.Sexp.Atom "NEQ" ]
  | LT -> Base.Sexp.List [ Base.Sexp.Atom "LT" ]
  | LE -> Base.Sexp.List [ Base.Sexp.Atom "LE" ]
  | GT -> Base.Sexp.List [ Base.Sexp.Atom "GT" ]
  | GE -> Base.Sexp.List [ Base.Sexp.Atom "GE" ]
  | AND -> Base.Sexp.List [ Base.Sexp.Atom "AND" ]
  | OR -> Base.Sexp.List [ Base.Sexp.Atom "OR" ]
  | ASSIGN -> Base.Sexp.List [ Base.Sexp.Atom "ASSIGN" ]
  | ARRAY -> Base.Sexp.List [ Base.Sexp.Atom "ARRAY" ]
  | IF -> Base.Sexp.List [ Base.Sexp.Atom "IF" ]
  | THEN -> Base.Sexp.List [ Base.Sexp.Atom "THEN" ]
  | ELSE -> Base.Sexp.List [ Base.Sexp.Atom "ELSE" ]
  | WHILE -> Base.Sexp.List [ Base.Sexp.Atom "WHILE" ]
  | FOR -> Base.Sexp.List [ Base.Sexp.Atom "FOR" ]
  | TO -> Base.Sexp.List [ Base.Sexp.Atom "TO" ]
  | DO -> Base.Sexp.List [ Base.Sexp.Atom "DO" ]
  | LET -> Base.Sexp.List [ Base.Sexp.Atom "LET" ]
  | IN -> Base.Sexp.List [ Base.Sexp.Atom "IN" ]
  | END -> Base.Sexp.List [ Base.Sexp.Atom "END" ]
  | OF -> Base.Sexp.List [ Base.Sexp.Atom "OF" ]
  | BREAK -> Base.Sexp.List [ Base.Sexp.Atom "BREAK" ]
  | NIL -> Base.Sexp.List [ Base.Sexp.Atom "NIL" ]
  | FUNCTION -> Base.Sexp.List [ Base.Sexp.Atom "FUNCTION" ]
  | VAR -> Base.Sexp.List [ Base.Sexp.Atom "VAR" ]
  | TYPE -> Base.Sexp.List [ Base.Sexp.Atom "TYPE" ]

let compare_token t1 t2 =
  if Base.Poly.(t1 = t2) then 0
  else 1 (* always return 1 if not equal since ordering is not defined *)

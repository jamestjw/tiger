type token =
  | ID of string
  | STRING of string
  | INT of int
  | COMMA
  | COLON
  | SEMICOLON
  | LPAREN
  | RPAREN
  | LBRACK
  | RBRACK
  | LBRACE
  | RBRACE
  | DOT
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | EQ
  | NEQ
  | LT
  | LE
  | GT
  | GE
  | AND
  | OR
  | ASSIGN
  | ARRAY
  | IF
  | THEN
  | ELSE
  | WHILE
  | FOR
  | TO
  | DO
  | LET
  | IN
  | END
  | OF
  | BREAK
  | NIL
  | FUNCTION
  | VAR
  | TYPE

open Parsing

let _ = parse_error

let yytransl_const =
  [|
    260 (* COMMA *);
    261 (* COLON *);
    262 (* SEMICOLON *);
    263 (* LPAREN *);
    264 (* RPAREN *);
    265 (* LBRACK *);
    266 (* RBRACK *);
    267 (* LBRACE *);
    268 (* RBRACE *);
    269 (* DOT *);
    270 (* PLUS *);
    271 (* MINUS *);
    272 (* TIMES *);
    273 (* DIVIDE *);
    274 (* EQ *);
    275 (* NEQ *);
    276 (* LT *);
    277 (* LE *);
    278 (* GT *);
    279 (* GE *);
    280 (* AND *);
    281 (* OR *);
    282 (* ASSIGN *);
    283 (* ARRAY *);
    284 (* IF *);
    285 (* THEN *);
    286 (* ELSE *);
    287 (* WHILE *);
    288 (* FOR *);
    289 (* TO *);
    290 (* DO *);
    291 (* LET *);
    292 (* IN *);
    293 (* END *);
    294 (* OF *);
    295 (* BREAK *);
    296 (* NIL *);
    297 (* FUNCTION *);
    298 (* VAR *);
    299 (* TYPE *);
    0;
  |]

let yytransl_block = [| 257 (* ID *); 258 (* STRING *); 259 (* INT *); 0 |]

let yylhs =


let yylen =


let yydefred =


let yydgoto =
  "\002\000\003\000\016\000\017\000\018\000\040\000\041\000\042\000\043\000\044\000\122\000\114\000\115\000\116\000\065\000\066\000\067\000\019\000\032\000\020\000\021\000\022\000\023\000\024\000\061\000\062\000"

let yysindex =


let yyrindex =


let yygindex =
  "\000\000\000\000\188\255\000\000\248\255\000\000\113\000\000\000\000\000\000\000\000\000\040\000\000\000\033\000\000\000\000\000\065\000\002\000\087\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"

let yytablesize = 1243

let yytable =
  "\031\000\055\000\030\000\099\000\100\000\103\000\119\000\135\000\048\000\049\000\071\000\033\000\034\000\035\000\071\000\072\000\120\000\023\000\058\000\072\000\136\000\046\000\047\000\048\000\049\000\023\000\104\000\059\000\060\000\063\000\001\000\030\000\121\000\058\000\077\000\025\000\037\000\038\000\039\000\037\000\038\000\039\000\015\000\125\000\036\000\035\000\015\000\079\000\080\000\081\000\082\000\083\000\084\000\085\000\086\000\087\000\088\000\089\000\090\000\091\000\092\000\025\000\045\000\069\000\064\000\141\000\024\000\068\000\143\000\031\000\070\000\024\000\024\000\024\000\058\000\101\000\145\000\004\000\005\000\006\000\007\000\025\000\074\000\073\000\008\000\096\000\025\000\025\000\025\000\004\000\075\000\026\000\009\000\027\000\076\000\028\000\107\000\029\000\109\000\093\000\094\000\098\000\097\000\105\000\111\000\010\000\118\000\102\000\011\000\012\000\124\000\108\000\013\000\113\000\126\000\117\000\014\000\015\000\127\000\030\000\005\000\006\000\007\000\123\000\128\000\129\000\008\000\130\000\134\000\139\000\132\000\140\000\138\000\050\000\009\000\142\000\144\000\073\000\019\000\004\000\005\000\006\000\007\000\029\000\069\000\020\000\008\000\010\000\029\000\014\000\011\000\012\000\014\000\078\000\009\000\005\000\006\000\007\000\014\000\015\000\131\000\008\000\137\000\110\000\106\000\000\000\000\000\010\000\000\000\009\000\011\000\012\000\000\000\000\000\000\000\000\000\000\000\040\000\014\000\015\000\000\000\000\000\010\000\000\000\000\000\011\000\012\000\000\000\000\000\000\000\000\000\000\000\000\000\014\000\015\000\046\000\047\000\048\000\049\000\050\000\051\000\052\000\053\000\054\000\055\000\056\000\057\000\058\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\072\000\000\000\000\000\000\000\000\000\000\000\041\000\046\000\047\000\048\000\049\000\050\000\051\000\052\000\053\000\054\000\055\000\056\000\057\000\058\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\133\000\046\000\047\000\048\000\049\000\050\000\051\000\052\000\053\000\054\000\055\000\056\000\057\000\058\000\000\000\055\000\055\000\055\000\055\000\055\000\112\000\055\000\055\000\055\000\063\000\055\000\000\000\055\000\000\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\000\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\000\000\055\000\055\000\055\000\055\000\055\000\035\000\035\000\035\000\035\000\035\000\000\000\035\000\000\000\035\000\065\000\035\000\000\000\035\000\000\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\000\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\000\000\035\000\035\000\035\000\035\000\035\000\004\000\004\000\004\000\004\000\004\000\000\000\000\000\004\000\004\000\038\000\004\000\000\000\004\000\000\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\000\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\000\000\004\000\004\000\004\000\004\000\004\000\050\000\050\000\050\000\050\000\050\000\000\000\050\000\050\000\050\000\039\000\050\000\000\000\050\000\000\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\000\000\000\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\000\000\050\000\050\000\050\000\050\000\050\000\040\000\040\000\040\000\040\000\040\000\000\000\040\000\040\000\040\000\044\000\040\000\000\000\040\000\000\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\000\000\000\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\000\000\040\000\040\000\040\000\040\000\040\000\041\000\041\000\041\000\041\000\041\000\000\000\041\000\041\000\041\000\046\000\041\000\000\000\041\000\000\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\000\000\000\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\000\000\041\000\041\000\041\000\041\000\041\000\000\000\063\000\063\000\063\000\063\000\063\000\000\000\063\000\063\000\063\000\045\000\063\000\000\000\063\000\000\000\063\000\063\000\063\000\063\000\063\000\063\000\063\000\063\000\063\000\063\000\063\000\063\000\000\000\000\000\063\000\063\000\063\000\063\000\063\000\063\000\063\000\063\000\063\000\063\000\000\000\063\000\063\000\063\000\063\000\063\000\065\000\065\000\065\000\065\000\065\000\000\000\065\000\065\000\065\000\047\000\065\000\000\000\065\000\000\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\000\000\065\000\065\000\000\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\000\000\065\000\065\000\065\000\065\000\065\000\038\000\038\000\038\000\038\000\038\000\000\000\038\000\038\000\038\000\042\000\038\000\000\000\038\000\000\000\038\000\038\000\000\000\000\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\000\000\000\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\000\000\038\000\038\000\038\000\038\000\038\000\039\000\039\000\039\000\039\000\039\000\000\000\039\000\039\000\039\000\043\000\039\000\000\000\039\000\000\000\039\000\039\000\000\000\000\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\000\000\000\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\000\000\039\000\039\000\039\000\039\000\039\000\044\000\044\000\044\000\044\000\044\000\000\000\044\000\044\000\044\000\048\000\044\000\000\000\044\000\000\000\000\000\000\000\000\000\000\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\000\000\000\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\000\000\044\000\044\000\044\000\044\000\044\000\046\000\046\000\046\000\046\000\046\000\000\000\046\000\046\000\046\000\049\000\046\000\000\000\046\000\000\000\000\000\000\000\000\000\000\000\046\000\046\000\046\000\046\000\046\000\046\000\046\000\046\000\000\000\000\000\046\000\046\000\046\000\046\000\046\000\046\000\046\000\046\000\046\000\046\000\000\000\046\000\046\000\046\000\046\000\046\000\000\000\045\000\045\000\045\000\045\000\045\000\000\000\045\000\045\000\045\000\031\000\045\000\000\000\045\000\000\000\000\000\000\000\000\000\000\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\000\000\000\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\000\000\045\000\045\000\045\000\045\000\045\000\047\000\047\000\047\000\047\000\047\000\000\000\047\000\047\000\047\000\033\000\047\000\000\000\047\000\000\000\000\000\000\000\000\000\000\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\000\000\000\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\000\000\047\000\047\000\047\000\047\000\047\000\042\000\042\000\042\000\042\000\042\000\000\000\042\000\042\000\042\000\032\000\042\000\000\000\042\000\000\000\000\000\000\000\000\000\000\000\042\000\042\000\000\000\000\000\000\000\000\000\042\000\042\000\000\000\000\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\000\000\042\000\042\000\042\000\042\000\042\000\043\000\043\000\043\000\043\000\043\000\000\000\043\000\043\000\043\000\056\000\043\000\000\000\043\000\000\000\000\000\000\000\000\000\000\000\043\000\043\000\000\000\000\000\000\000\000\000\043\000\043\000\000\000\000\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\000\000\043\000\043\000\043\000\043\000\043\000\048\000\048\000\048\000\048\000\048\000\000\000\048\000\048\000\048\000\000\000\048\000\000\000\048\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\048\000\048\000\000\000\000\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\000\000\048\000\048\000\048\000\048\000\048\000\049\000\049\000\049\000\049\000\049\000\000\000\049\000\049\000\049\000\000\000\049\000\000\000\049\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\049\000\049\000\000\000\000\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\000\000\049\000\049\000\049\000\049\000\049\000\000\000\031\000\031\000\031\000\031\000\031\000\000\000\031\000\031\000\031\000\095\000\031\000\000\000\031\000\046\000\047\000\048\000\049\000\050\000\051\000\052\000\053\000\054\000\055\000\056\000\057\000\058\000\000\000\000\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\000\000\031\000\031\000\031\000\031\000\031\000\033\000\033\000\033\000\033\000\033\000\000\000\033\000\033\000\033\000\000\000\033\000\000\000\033\000\046\000\047\000\048\000\049\000\050\000\051\000\052\000\053\000\054\000\055\000\056\000\057\000\058\000\000\000\000\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\000\000\033\000\033\000\033\000\033\000\033\000\032\000\032\000\032\000\032\000\032\000\000\000\032\000\032\000\032\000\000\000\032\000\000\000\032\000\046\000\047\000\048\000\049\000\050\000\051\000\052\000\053\000\054\000\055\000\000\000\000\000\058\000\000\000\000\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\000\000\032\000\032\000\032\000\032\000\032\000\056\000\056\000\056\000\056\000\056\000\000\000\056\000\056\000\056\000\000\000\056\000\000\000\056\000\046\000\047\000\048\000\049\000\000\000\000\000\052\000\053\000\054\000\055\000\000\000\000\000\058\000\000\000\000\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\000\000\056\000\056\000\056\000\056\000\056\000\046\000\047\000\048\000\049\000\050\000\051\000\052\000\053\000\054\000\055\000\056\000\057\000\058\000\000\000\000\000\071\000"

let yycheck =


let yynames_const =
  "COMMA\000COLON\000SEMICOLON\000LPAREN\000RPAREN\000LBRACK\000RBRACK\000LBRACE\000RBRACE\000DOT\000PLUS\000MINUS\000TIMES\000DIVIDE\000EQ\000NEQ\000LT\000LE\000GT\000GE\000AND\000OR\000ASSIGN\000ARRAY\000IF\000THEN\000ELSE\000WHILE\000FOR\000TO\000DO\000LET\000IN\000END\000OF\000BREAK\000NIL\000FUNCTION\000VAR\000TYPE\000"

let yynames_block = "ID\000STRING\000INT\000"

let yyact =
  [|
    (fun _ -> failwith "parser");
    (fun __caml_parser_env -> Obj.repr (() : unit));
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 1 : unit) in
      let _2 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
      Obj.repr (() : unit));
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 0 : 'let_stmt) in
      Obj.repr (() : 'statement));
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 0 : 'nonempty_expseq) in
      Obj.repr (() : 'statement));
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 0 : 'dec) in
      Obj.repr (() : 'decs));
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decs) in
      let _2 = (Parsing.peek_val __caml_parser_env 0 : 'dec) in
      Obj.repr (() : 'decs));
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tydec) in
      Obj.repr (() : 'dec));
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 0 : 'vardec) in
      Obj.repr (() : 'dec));
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fundec) in
      Obj.repr (() : 'dec));
    (fun __caml_parser_env ->
      let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
      let _4 = (Parsing.peek_val __caml_parser_env 0 : 'ty) in
      Obj.repr (() : 'tydec));
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
      Obj.repr (() : 'ty));
    (fun __caml_parser_env ->
      let _2 = (Parsing.peek_val __caml_parser_env 1 : 'tyfields) in
      Obj.repr (() : 'ty));
    (fun __caml_parser_env ->
      let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
      Obj.repr (() : 'ty));
    (fun __caml_parser_env -> Obj.repr (() : 'tyfields));
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 0 : 'nonempty_tyfields) in
      Obj.repr (() : 'tyfields));
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tyfield) in
      Obj.repr (() : 'nonempty_tyfields));
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 2 : 'nonempty_tyfields) in
      let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tyfield) in
      Obj.repr (() : 'nonempty_tyfields));
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
      let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
      Obj.repr (() : 'tyfield));
    (fun __caml_parser_env -> Obj.repr (() : 'record_initialisation_fields));
    (fun __caml_parser_env ->
      let _1 =
        (Parsing.peek_val __caml_parser_env 0
          : 'ne_record_initialisation_fields)
      in
      Obj.repr (() : 'record_initialisation_fields));
    (fun __caml_parser_env ->
      let _1 =
        (Parsing.peek_val __caml_parser_env 0 : 'record_initialisation_field)
      in
      Obj.repr (() : 'ne_record_initialisation_fields));
    (fun __caml_parser_env ->
      let _1 =
        (Parsing.peek_val __caml_parser_env 2
          : 'ne_record_initialisation_fields)
      in
      let _3 =
        (Parsing.peek_val __caml_parser_env 0 : 'record_initialisation_field)
      in
      Obj.repr (() : 'ne_record_initialisation_fields));
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
      let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
      Obj.repr (() : 'record_initialisation_field));
    (fun __caml_parser_env ->
      let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
      let _4 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
      Obj.repr (() : 'vardec));
    (fun __caml_parser_env ->
      let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
      let _4 = (Parsing.peek_val __caml_parser_env 2 : string) in
      let _6 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
      Obj.repr (() : 'vardec));
    (fun __caml_parser_env ->
      let _2 = (Parsing.peek_val __caml_parser_env 5 : string) in
      let _4 = (Parsing.peek_val __caml_parser_env 3 : 'tyfields) in
      let _7 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
      Obj.repr (() : 'fundec));
    (fun __caml_parser_env ->
      let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
      let _4 = (Parsing.peek_val __caml_parser_env 5 : 'tyfields) in
      let _7 = (Parsing.peek_val __caml_parser_env 2 : string) in
      let _9 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
      Obj.repr (() : 'fundec));
    (fun __caml_parser_env ->
      let _2 = (Parsing.peek_val __caml_parser_env 3 : 'decs) in
      let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expseq) in
      Obj.repr (() : 'let_stmt));
    (fun __caml_parser_env -> Obj.repr (() : 'expseq));
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 0 : 'nonempty_expseq) in
      Obj.repr (() : 'expseq));
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
      Obj.repr (() : 'nonempty_expseq));
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 2 : 'nonempty_expseq) in
      let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
      Obj.repr (() : 'nonempty_expseq));
    (fun __caml_parser_env ->
      let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
      Obj.repr (() : 'nonempty_expseq));
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
      Obj.repr (() : 'exp));
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
      Obj.repr (() : 'exp));
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
      Obj.repr (() : 'exp));
    (fun __caml_parser_env -> Obj.repr (() : 'exp));
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
      let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
      Obj.repr (() : 'exp));
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
      let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
      Obj.repr (() : 'exp));
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
      let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
      Obj.repr (() : 'exp));
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
      let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
      Obj.repr (() : 'exp));
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
      let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
      Obj.repr (() : 'exp));
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
      let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
      Obj.repr (() : 'exp));
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
      let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
      Obj.repr (() : 'exp));
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
      let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
      Obj.repr (() : 'exp));
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
      let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
      Obj.repr (() : 'exp));
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
      let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
      Obj.repr (() : 'exp));
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
      let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
      Obj.repr (() : 'exp));
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
      let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
      Obj.repr (() : 'exp));
    (fun __caml_parser_env ->
      let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
      Obj.repr (() : 'exp));
    (fun __caml_parser_env -> Obj.repr (() : 'exp));
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 0 : 'assignment) in
      Obj.repr (() : 'exp));
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 0 : 'funcall) in
      Obj.repr (() : 'exp));
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
      let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
      Obj.repr (() : 'exp));
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
      let _3 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
      Obj.repr (() : 'exp));
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
      let _3 = (Parsing.peek_val __caml_parser_env 3 : 'exp) in
      let _6 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
      Obj.repr (() : 'exp));
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
      let _3 =
        (Parsing.peek_val __caml_parser_env 1 : 'record_initialisation_fields)
      in
      Obj.repr (() : 'exp));
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 0 : 'if_stmt) in
      Obj.repr (() : 'exp));
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 0 : 'for_stmt) in
      Obj.repr (() : 'exp));
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 0 : 'while_stmt) in
      Obj.repr (() : 'exp));
    (fun __caml_parser_env ->
      let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expseq) in
      Obj.repr (() : 'exp));
    (fun __caml_parser_env -> Obj.repr (() : 'exp));
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
      let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
      Obj.repr (() : 'assignment));
    (fun __caml_parser_env ->
      let _2 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
      let _4 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
      Obj.repr (() : 'while_stmt));
    (fun __caml_parser_env ->
      let _2 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
      let _4 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
      Obj.repr (() : 'if_stmt));
    (fun __caml_parser_env ->
      let _2 = (Parsing.peek_val __caml_parser_env 4 : 'exp) in
      let _4 = (Parsing.peek_val __caml_parser_env 2 : 'statement) in
      let _6 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
      Obj.repr (() : 'if_stmt));
    (fun __caml_parser_env ->
      let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
      let _4 = (Parsing.peek_val __caml_parser_env 4 : 'exp) in
      let _6 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
      let _8 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
      Obj.repr (() : 'for_stmt));
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
      let _3 = (Parsing.peek_val __caml_parser_env 1 : 'params) in
      Obj.repr (() : 'funcall));
    (fun __caml_parser_env -> Obj.repr (() : 'params));
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 0 : 'non_empty_params) in
      Obj.repr (() : 'params));
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
      Obj.repr (() : 'non_empty_params));
    (fun __caml_parser_env ->
      let _1 = (Parsing.peek_val __caml_parser_env 2 : 'non_empty_params) in
      let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
      Obj.repr (() : 'non_empty_params))
    (* Entry input *);
    (fun __caml_parser_env ->
      raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)));
  |]

let yytables =
  {
    Parsing.actions = yyact;
    Parsing.transl_const = yytransl_const;
    Parsing.transl_block = yytransl_block;
    Parsing.lhs = yylhs;
    Parsing.len = yylen;
    Parsing.defred = yydefred;
    Parsing.dgoto = yydgoto;
    Parsing.sindex = yysindex;
    Parsing.rindex = yyrindex;
    Parsing.gindex = yygindex;
    Parsing.tablesize = yytablesize;
    Parsing.table = yytable;
    Parsing.check = yycheck;
    Parsing.error_function = parse_error;
    Parsing.names_const = yynames_const;
    Parsing.names_block = yynames_block;
  }

let input (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) : unit =
  Parsing.yyparse yytables 1 lexfun lexbuf

let sexp_of_token t =
  match t with
  | ID s -> Base.Sexp.List [ Base.Sexp.Atom "ID"; Base.Sexp.Atom s ]
  | STRING s -> Base.Sexp.List [ Base.Sexp.Atom "STRING"; Base.Sexp.Atom s ]
  | INT i ->
      Base.Sexp.List [ Base.Sexp.Atom "INT"; Base.Sexp.Atom (string_of_int i) ]
  | COMMA -> Base.Sexp.List [ Base.Sexp.Atom "COMMA" ]
  | COLON -> Base.Sexp.List [ Base.Sexp.Atom "COLON" ]
  | SEMICOLON -> Base.Sexp.List [ Base.Sexp.Atom "SEMICOLON" ]
  | LPAREN -> Base.Sexp.List [ Base.Sexp.Atom "LPAREN" ]
  | RPAREN -> Base.Sexp.List [ Base.Sexp.Atom "RPAREN" ]
  | LBRACK -> Base.Sexp.List [ Base.Sexp.Atom "LBRACK" ]
  | RBRACK -> Base.Sexp.List [ Base.Sexp.Atom "RBRACK" ]
  | LBRACE -> Base.Sexp.List [ Base.Sexp.Atom "LBRACE" ]
  | RBRACE -> Base.Sexp.List [ Base.Sexp.Atom "RBRACE" ]
  | DOT -> Base.Sexp.List [ Base.Sexp.Atom "DOT" ]
  | PLUS -> Base.Sexp.List [ Base.Sexp.Atom "PLUS" ]
  | MINUS -> Base.Sexp.List [ Base.Sexp.Atom "MINUS" ]
  | TIMES -> Base.Sexp.List [ Base.Sexp.Atom "TIMES" ]
  | DIVIDE -> Base.Sexp.List [ Base.Sexp.Atom "DIVIDE" ]
  | EQ -> Base.Sexp.List [ Base.Sexp.Atom "EQ" ]
  | NEQ -> Base.Sexp.List [ Base.Sexp.Atom "NEQ" ]
  | LT -> Base.Sexp.List [ Base.Sexp.Atom "LT" ]
  | LE -> Base.Sexp.List [ Base.Sexp.Atom "LE" ]
  | GT -> Base.Sexp.List [ Base.Sexp.Atom "GT" ]
  | GE -> Base.Sexp.List [ Base.Sexp.Atom "GE" ]
  | AND -> Base.Sexp.List [ Base.Sexp.Atom "AND" ]
  | OR -> Base.Sexp.List [ Base.Sexp.Atom "OR" ]
  | ASSIGN -> Base.Sexp.List [ Base.Sexp.Atom "ASSIGN" ]
  | ARRAY -> Base.Sexp.List [ Base.Sexp.Atom "ARRAY" ]
  | IF -> Base.Sexp.List [ Base.Sexp.Atom "IF" ]
  | THEN -> Base.Sexp.List [ Base.Sexp.Atom "THEN" ]
  | ELSE -> Base.Sexp.List [ Base.Sexp.Atom "ELSE" ]
  | WHILE -> Base.Sexp.List [ Base.Sexp.Atom "WHILE" ]
  | FOR -> Base.Sexp.List [ Base.Sexp.Atom "FOR" ]
  | TO -> Base.Sexp.List [ Base.Sexp.Atom "TO" ]
  | DO -> Base.Sexp.List [ Base.Sexp.Atom "DO" ]
  | LET -> Base.Sexp.List [ Base.Sexp.Atom "LET" ]
  | IN -> Base.Sexp.List [ Base.Sexp.Atom "IN" ]
  | END -> Base.Sexp.List [ Base.Sexp.Atom "END" ]
  | OF -> Base.Sexp.List [ Base.Sexp.Atom "OF" ]
  | BREAK -> Base.Sexp.List [ Base.Sexp.Atom "BREAK" ]
  | NIL -> Base.Sexp.List [ Base.Sexp.Atom "NIL" ]
  | FUNCTION -> Base.Sexp.List [ Base.Sexp.Atom "FUNCTION" ]
  | VAR -> Base.Sexp.List [ Base.Sexp.Atom "VAR" ]
  | TYPE -> Base.Sexp.List [ Base.Sexp.Atom "TYPE" ]

let compare_token t1 t2 =
  if Base.Poly.(t1 = t2) then 0
  else 1 (* always return 1 if not equal since ordering is not defined *)
